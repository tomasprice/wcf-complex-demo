//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.CalculatorServiceReferenceConsole {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ComplexNumber", Namespace="http://schemas.datacontract.org/2004/07/wcf_calc_demo")]
    [System.SerializableAttribute()]
    public partial class ComplexNumber : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ImaginaryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RealField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Imaginary {
            get {
                return this.ImaginaryField;
            }
            set {
                if ((this.ImaginaryField.Equals(value) != true)) {
                    this.ImaginaryField = value;
                    this.RaisePropertyChanged("Imaginary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Real {
            get {
                return this.RealField;
            }
            set {
                if ((this.RealField.Equals(value) != true)) {
                    this.RealField = value;
                    this.RaisePropertyChanged("Real");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculatorServiceReferenceConsole.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber Multiply(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> MultiplyAsync(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoublesMultiply", ReplyAction="http://tempuri.org/ICalculator/DoublesMultiplyResponse")]
        ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber DoublesMultiply(double real_1, double imaginary_1, double real_2, double imaginary_2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoublesMultiply", ReplyAction="http://tempuri.org/ICalculator/DoublesMultiplyResponse")]
        System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DoublesMultiplyAsync(double real_1, double imaginary_1, double real_2, double imaginary_2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Substract", ReplyAction="http://tempuri.org/ICalculator/SubstractResponse")]
        ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber Substract(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Substract", ReplyAction="http://tempuri.org/ICalculator/SubstractResponse")]
        System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> SubstractAsync(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoublesSubstract", ReplyAction="http://tempuri.org/ICalculator/DoublesSubstractResponse")]
        ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber DoublesSubstract(double real_1, double imaginary_1, double real_2, double imaginary_2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoublesSubstract", ReplyAction="http://tempuri.org/ICalculator/DoublesSubstractResponse")]
        System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DoublesSubstractAsync(double real_1, double imaginary_1, double real_2, double imaginary_2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Add", ReplyAction="http://tempuri.org/ICalculator/AddResponse")]
        ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber Add(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Add", ReplyAction="http://tempuri.org/ICalculator/AddResponse")]
        System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> AddAsync(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoublesAdd", ReplyAction="http://tempuri.org/ICalculator/DoublesAddResponse")]
        ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber DoublesAdd(double real_1, double imaginary_1, double real_2, double imaginary_2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoublesAdd", ReplyAction="http://tempuri.org/ICalculator/DoublesAddResponse")]
        System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DoublesAddAsync(double real_1, double imaginary_1, double real_2, double imaginary_2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divade", ReplyAction="http://tempuri.org/ICalculator/DivadeResponse")]
        ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber Divade(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divade", ReplyAction="http://tempuri.org/ICalculator/DivadeResponse")]
        System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DivadeAsync(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoublesDivade", ReplyAction="http://tempuri.org/ICalculator/DoublesDivadeResponse")]
        ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber DoublesDivade(double real_1, double imaginary_1, double real_2, double imaginary_2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DoublesDivade", ReplyAction="http://tempuri.org/ICalculator/DoublesDivadeResponse")]
        System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DoublesDivadeAsync(double real_1, double imaginary_1, double real_2, double imaginary_2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : ConsoleClient.CalculatorServiceReferenceConsole.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<ConsoleClient.CalculatorServiceReferenceConsole.ICalculator>, ConsoleClient.CalculatorServiceReferenceConsole.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber Multiply(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex = null) {
            return base.Channel.Multiply(complexNumber, complexNumber_2, complex);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> MultiplyAsync(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex) {
            return base.Channel.MultiplyAsync(complexNumber, complexNumber_2, complex);
        }
        
        public ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber DoublesMultiply(double real_1, double imaginary_1, double real_2, double imaginary_2) {
            return base.Channel.DoublesMultiply(real_1, imaginary_1, real_2, imaginary_2);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DoublesMultiplyAsync(double real_1, double imaginary_1, double real_2, double imaginary_2) {
            return base.Channel.DoublesMultiplyAsync(real_1, imaginary_1, real_2, imaginary_2);
        }
        
        public ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber Substract(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex = null) {
            return base.Channel.Substract(complexNumber, complexNumber_2, complex);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> SubstractAsync(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex) {
            return base.Channel.SubstractAsync(complexNumber, complexNumber_2, complex);
        }
        
        public ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber DoublesSubstract(double real_1, double imaginary_1, double real_2, double imaginary_2) {
            return base.Channel.DoublesSubstract(real_1, imaginary_1, real_2, imaginary_2);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DoublesSubstractAsync(double real_1, double imaginary_1, double real_2, double imaginary_2) {
            return base.Channel.DoublesSubstractAsync(real_1, imaginary_1, real_2, imaginary_2);
        }
        
        public ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber Add(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex = null) {
            return base.Channel.Add(complexNumber, complexNumber_2, complex);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> AddAsync(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex) {
            return base.Channel.AddAsync(complexNumber, complexNumber_2, complex);
        }
        
        public ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber DoublesAdd(double real_1, double imaginary_1, double real_2, double imaginary_2) {
            return base.Channel.DoublesAdd(real_1, imaginary_1, real_2, imaginary_2);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DoublesAddAsync(double real_1, double imaginary_1, double real_2, double imaginary_2) {
            return base.Channel.DoublesAddAsync(real_1, imaginary_1, real_2, imaginary_2);
        }
        
        public ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber Divade(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex = null) {
            return base.Channel.Divade(complexNumber, complexNumber_2, complex);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DivadeAsync(ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber, ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber complexNumber_2, string complex) {
            return base.Channel.DivadeAsync(complexNumber, complexNumber_2, complex);
        }
        
        public ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber DoublesDivade(double real_1, double imaginary_1, double real_2, double imaginary_2) {
            return base.Channel.DoublesDivade(real_1, imaginary_1, real_2, imaginary_2);
        }
        
        public System.Threading.Tasks.Task<ConsoleClient.CalculatorServiceReferenceConsole.ComplexNumber> DoublesDivadeAsync(double real_1, double imaginary_1, double real_2, double imaginary_2) {
            return base.Channel.DoublesDivadeAsync(real_1, imaginary_1, real_2, imaginary_2);
        }
    }
}
